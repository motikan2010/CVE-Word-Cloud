import csv
import os
import argparse
from datetime import datetime, timedelta
from dotenv import load_dotenv
from wordcloud import WordCloud

load_dotenv(verbose=True)


def get_description_list(target_date):
    description_list = []
    for year in range(1999, 2021):
        with open('%s%i.tsv' % (os.environ.get("CVE_Easy_List"), year)) as f:
            reader = csv.reader(f, delimiter='\t')
            for row in reader:
                if len(row) != 4 or row[1] != target_date:
                    continue
                description_list.append(row[2])
                description_list.append(row[3])
    return description_list


def create_word_cloud(description_list):
    word_list = ''
    for description in description_list:
        word_list += description + '\n'

    stop_words = [u'am', u'is', u'of', u'and', u'the', u'to', u'it', u'for', u'in', u'as', u'or', u'are', u'be', u'this', u'that', u'will', u'there', u'was',
                  u'below']
    word_cloud = WordCloud(background_color="white",
                           font_path='/System/Library/Fonts/HelveticaNeue.ttc',
                           width=900, height=500, stopwords=set(stop_words)).generate(word_list)
    word_cloud.to_file('image.png')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-d', '--days', type=int, default=0)
    args = parser.parse_args()

    target_date = (datetime.now() - timedelta(days=args.days)).strftime('%Y-%m-%d')
    print('Search : %s' % target_date)
    description_list = get_description_list(target_date)
    if len(description_list) == 0:
        print('Error: Not found vulnerability description')
        exit(1)
    else:
        print('Found Vulnerabilities : %i' % len(description_list))
        create_word_cloud(description_list)
